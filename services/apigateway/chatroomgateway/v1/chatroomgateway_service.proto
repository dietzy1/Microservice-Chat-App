syntax = "proto3";

package chatroomgateway.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/dietzy1/chatapp/services/apigateway/chatroomgateway/v1;chatroomgatewayv1";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "1.0"};
  external_docs: {
    url: "https://github.com/dietzy1/Microservice-Chat-App";
    description: "Backend GRPC chatapp microservice";
  }
  schemes: HTTPS;
};

service ChatroomGatewayService {
  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/CreateRoom",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a chatroom"
      description: "GRPC gateway call to create a chatroom."
      tags: "Chatroom"
    };
  }

  rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/DeleteRoom",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a chatroom"
      description: "GRPC gateway call to delete a chatroom."
      tags: "Chatroom"
    };
  }

  rpc GetRoom(GetRoomRequest) returns (GetRoomResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/GetRoom",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a chatroom"
      description: "GRPC gateway call to get a chatroom."
      tags: "Chatroom"
    };
  }

  rpc GetRooms(GetRoomsRequest) returns (GetRoomsResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/GetRooms",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get chatrooms"
      description: "GRPC gateway call to get chatrooms."
      tags: "Chatroom"
    };
  }

  rpc CreateChannel(CreateChannelRequest) returns (CreateChannelResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/CreateChannel",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a channel"
      description: "GRPC gateway call to create a channel."
      tags: "Channel"
    };
  }

  rpc DeleteChannel(DeleteChannelRequest) returns (DeleteChannelResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/DeleteChannel",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete a channel"
      description: "GRPC gateway call to delete a channel."
      tags: "Channel"
    };
  }

  rpc GetChannel(GetChannelRequest) returns (GetChannelResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/GetChannel",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a channel"
      description: "GRPC gateway call to get a channel."
      tags: "Channel"
    };
  }

  rpc InviteUser(InviteUserRequest) returns (InviteUserResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/InviteUser",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Invite a user"
      description: "GRPC gateway call to invite a user."
      tags: "User"
    };
  }

  rpc RemoveUser(RemoveUserRequest) returns (RemoveUserResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/RemoveUser",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Remove a user"
      description: "GRPC gateway call to remove a user."
      tags: "User"
    };
  }

  rpc AddUser(AddUserRequest) returns (AddUserResponse) {
    option (google.api.http) = {
      post: "/chatroomgateway.v1.ChatroomGatewayService/AddUser",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Add a user"
      description: "GRPC gateway call to add a user."
      tags: "User"
    };
  }
}

message CreateRoomRequest {
  string name = 1;
  string owner_uuid = 2;
}

message CreateRoomResponse {}

message DeleteRoomRequest {
  string chatroom_uuid = 1;
  string owner_uuid = 2;
}

message DeleteRoomResponse {}

message GetRoomRequest {
  string chatroom_uuid = 1;
}

message GetRoomResponse {
  string chatroom_uuid = 1;
  string name = 2;
  string icon = 3;
  string owner_uuid = 4;
  repeated string user_uuids = 5;
  repeated Channel channel = 6;
}

message Channel {
  string channel_uuid = 1;
  string name = 2;
  string chatroom_uuid = 3;
  string owner_uuid = 4;
}

message GetRoomsRequest {
  repeated string chatroom_uuids = 1;
}

message GetRoomsResponse {
  repeated GetRoomResponse rooms = 1;
}

// -- ------------------------------------------------------------------------------

message CreateChannelRequest {
  string name = 1;
  string owner_uuid = 2;
  string chatroom_uuid = 3;
}

message CreateChannelResponse {}

message DeleteChannelRequest {
  string chatroom_uuid = 1;
  string channel_uuid = 2;
  string owner_uuid = 3;
}

message DeleteChannelResponse {}

message GetChannelRequest {
  string chatroom_uuid = 1;
  string channel_uuid = 2;
}

message GetChannelResponse {
  string chatroom_uuid = 1;
  string channel_uuid = 2;
  string name = 3;
}

// -- ------------------------------------------------------------------------------

message InviteUserRequest {
  string user_uuid = 1;
  string chatroom_uuid = 2;
  string owner_uuid = 3;
}

message InviteUserResponse {}

message RemoveUserRequest {
  string user_uuid = 1;
  string chatroom_uuid = 2;
  string owner_uuid = 3;
}

message RemoveUserResponse {}

message AddUserRequest {
  string user_uuid = 1;
  string chatroom_uuid = 2;
  string owner_uuid = 3;
}

message AddUserResponse {}

// -- ------------------------------------------------------------------------------

//Used for activity stream

message Activity {
  repeated string online_users = 1;
}
