syntax = "proto3";

package icongateway.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/dietzy1/chatapp/services/apigateway/icongateway/v1;icongatewayv1";
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "1.0"};
  external_docs: {
    url: "https://github.com/dietzy1/Microservice-Chat-App";
    description: "Backend GRPC chatapp microservice";
  }
  schemes: HTTPS;
};

service IconGatewayService {
  rpc GetIcon(GetIconRequest) returns (GetIconResponse) {
    option (google.api.http) = {
      post: "/icongateway.v1.IconService/GetIcon",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get an icon"
      description: "GRPC gateway call to get an icon."
      tags: "Icon"
    };
  }
  rpc GetIcons(GetIconsRequest) returns (GetIconsResponse) {
    option (google.api.http) = {
      post: "/icongateway.v1.IconService/GetIcons",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get icons"
      description: "GRPC gateway call to get icons."
      tags: "Icon"
    };
  }

  rpc DeleteIcon(DeleteIconRequest) returns (DeleteIconResponse) {
    option (google.api.http) = {
      post: "/icongateway.v1.IconService/DeleteIcon",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Delete an icon"
      description: "GRPC gateway call to delete an icon."
      tags: "Icon"
    };
  }
}

message Icon {
  string link = 1;
  string uuid = 2;
  string kindof = 3;
  string owner_uuid = 4;
}

message GetIconRequest {
  string uuid = 1;
}

message GetIconResponse {
  Icon icon = 1;
}

message GetIconsRequest {
  string owner_uuid = 1;
}

message GetIconsResponse {
  repeated Icon icons = 1;
}

message DeleteIconRequest {
  string uuid = 1;
  string owner_uuid = 2;
}

message DeleteIconResponse {}

message GetAvatarsRequest {}

message GetAvatarsResponse {
  repeated Icon icons = 1;
}
