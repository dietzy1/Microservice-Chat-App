syntax = "proto3";

package authgateway.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/dietzy1/chatapp/services/apigateway/authgateway/v1;authgatewayv1";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "1.0"};
  external_docs: {
    url: "https://github.com/dietzy1/Microservice-Chat-App";
    description: "Backend GRPC chatapp microservice";
  }
  schemes: HTTPS;
};

service AuthGatewayService {
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/authgateway.v1.AuthGatewayService/Login",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Login a user"
      description: "GRPC gateway call to login a user."
      tags: "Authentication"
    };
  }

  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {post: "/authgateway.v1.AuthGatewayService/Logout"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Logout a user"
      description: "GRPC gateway call to logout a user."
      tags: "Authentication"
    };
  }

  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse) {
    option (google.api.http) = {post: "/authgateway.v1.AuthGatewayService/Authenticate"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Authenticate a user"
      description: "GRPC gateway call to authenticate a user."
      tags: "Authentication"
    };
  }
}

message LoginRequest {
  string username = 1;
  string password = 2;
}

message LoginResponse {}

message LogoutRequest {}

message LogoutResponse {}

message AuthenticateRequest {}

message AuthenticateResponse {}
