syntax = "proto3";

package usergateway.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/dietzy1/chatapp/services/apigateway/usergateway/v1;usergatewayv1";
// These annotations are used when generating the OpenAPI file.
option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {version: "1.0"};
  external_docs: {
    url: "https://github.com/dietzy1/Microservice-Chat-App";
    description: "Backend GRPC chatapp microservice";
  }
  schemes: HTTPS;
};

service UserGatewayService {
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      post: "/v1/user",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get a user"
      description: "GRPC gateway call to get a user."
      tags: "User"
    };
  }

  rpc EditDescription(EditDescriptionRequest) returns (EditDescriptionResponse) {
    option (google.api.http) = {
      post: "/v1/user/editdescription",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Edit the description of a user"
      description: "GRPC gateway call to edit the description of a user."
      tags: "User"
    };
  }

  rpc ChangeAvatar(ChangeAvatarRequest) returns (ChangeAvatarResponse) {
    option (google.api.http) = {
      post: "/v1/user/changeavatar",
      body: "*",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Change the avatar of a user"
      description: "GRPC gateway call to change the avatar of a user."
      tags: "User"
    };
  }

  rpc GetAvatars(GetAvatarsRequest) returns (GetAvatarsResponse) {
    option (google.api.http) = {get: "/v1/user/getavatars"};
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get all avatars"
      description: "GRPC gateway call to get all avatars."
      tags: "User"
    };
  }
}

message GetUserRequest {
  string user_uuid = 1;
}

message GetUserResponse {
  string name = 1;
  string uuid = 2;
  Icon icon = 3;
  string description = 4;
  string join_date = 5;
  repeated string chat_servers = 6;
}

message EditDescriptionRequest {
  string user_uuid = 1;
  string description = 2;
}

message EditDescriptionResponse {}

message ChangeAvatarRequest {
  string user_uuid = 1;
  string icon_uuid = 2;
}

message ChangeAvatarResponse {}

message GetAvatarsRequest {}

message GetAvatarsResponse {
  repeated Icon icons = 1;
}

message Icon {
  string link = 1;
  string uuid = 2;
}
