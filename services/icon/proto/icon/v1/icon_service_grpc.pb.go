// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: icon/v1/icon_service.proto

package iconv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IconService_GetIcon_FullMethodName    = "/icon.v1.IconService/GetIcon"
	IconService_DeleteIcon_FullMethodName = "/icon.v1.IconService/DeleteIcon"
)

// IconServiceClient is the client API for IconService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IconServiceClient interface {
	GetIcon(ctx context.Context, in *GetIconRequest, opts ...grpc.CallOption) (*GetIconResponse, error)
	DeleteIcon(ctx context.Context, in *DeleteIconRequest, opts ...grpc.CallOption) (*DeleteIconResponse, error)
}

type iconServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIconServiceClient(cc grpc.ClientConnInterface) IconServiceClient {
	return &iconServiceClient{cc}
}

func (c *iconServiceClient) GetIcon(ctx context.Context, in *GetIconRequest, opts ...grpc.CallOption) (*GetIconResponse, error) {
	out := new(GetIconResponse)
	err := c.cc.Invoke(ctx, IconService_GetIcon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iconServiceClient) DeleteIcon(ctx context.Context, in *DeleteIconRequest, opts ...grpc.CallOption) (*DeleteIconResponse, error) {
	out := new(DeleteIconResponse)
	err := c.cc.Invoke(ctx, IconService_DeleteIcon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IconServiceServer is the server API for IconService service.
// All implementations should embed UnimplementedIconServiceServer
// for forward compatibility
type IconServiceServer interface {
	GetIcon(context.Context, *GetIconRequest) (*GetIconResponse, error)
	DeleteIcon(context.Context, *DeleteIconRequest) (*DeleteIconResponse, error)
}

// UnimplementedIconServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIconServiceServer struct {
}

func (UnimplementedIconServiceServer) GetIcon(context.Context, *GetIconRequest) (*GetIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIcon not implemented")
}
func (UnimplementedIconServiceServer) DeleteIcon(context.Context, *DeleteIconRequest) (*DeleteIconResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIcon not implemented")
}

// UnsafeIconServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IconServiceServer will
// result in compilation errors.
type UnsafeIconServiceServer interface {
	mustEmbedUnimplementedIconServiceServer()
}

func RegisterIconServiceServer(s grpc.ServiceRegistrar, srv IconServiceServer) {
	s.RegisterService(&IconService_ServiceDesc, srv)
}

func _IconService_GetIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IconServiceServer).GetIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IconService_GetIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IconServiceServer).GetIcon(ctx, req.(*GetIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IconService_DeleteIcon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIconRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IconServiceServer).DeleteIcon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IconService_DeleteIcon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IconServiceServer).DeleteIcon(ctx, req.(*DeleteIconRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IconService_ServiceDesc is the grpc.ServiceDesc for IconService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IconService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "icon.v1.IconService",
	HandlerType: (*IconServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIcon",
			Handler:    _IconService_GetIcon_Handler,
		},
		{
			MethodName: "DeleteIcon",
			Handler:    _IconService_DeleteIcon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "icon/v1/icon_service.proto",
}
