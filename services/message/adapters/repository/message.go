package repository

import (
	"context"
	"os"

	"github.com/dietzy1/chatapp/services/message/core"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo/options"
)

//Messages should be stored on a room basis
//So that means that each room should be a collection

// this interface should be moved to the domain layer

// TODO:
func (a *Db) GetMsg(ctx context.Context, room core.ChatRoom) (core.Message, error) {
	collection := a.client.Database(os.Getenv("DBNAME")).Collection(room.Uuid)
	msg := core.Message{}
	//Find latest 10 messages
	opts := options.Find().SetLimit(10)
	cursor, err := collection.Find(ctx, bson.D{}, opts)
	if err != nil {
		return msg, err
	}
	if err = cursor.Decode(&msg); err != nil {
		return msg, err
	}

	return core.Message{}, nil
}

// TODO:
func (a *Db) AddMsg(ctx context.Context, room core.ChatRoom, msg core.Message) error {
	collection := a.client.Database(os.Getenv("DBNAME")).Collection(room.Uuid)
	_, err := collection.InsertOne(ctx, msg)
	if err != nil {
		return err
	}

	return nil
}

// TODO:
// This is probaly incorrect needs to be fixed
func (a *Db) UpdateMsg(ctx context.Context, room core.ChatRoom, id string, msg core.Message) error {
	collection := a.client.Database(os.Getenv("DBNAME")).Collection(room.Uuid)
	_, err := collection.UpdateOne(ctx, bson.M{"uuid": id}, bson.M{"$set": msg})
	if err != nil {
		return err
	}

	return nil
}

// TODO:
// Autogenerated need to validate that it actually is correct code5
func (a *Db) DeleteMsg(ctx context.Context, room core.ChatRoom, id string) error {
	collection := a.client.Database(os.Getenv("DBNAME")).Collection(room.Uuid)
	_, err := collection.DeleteOne(ctx, bson.M{"uuid": id})
	if err != nil {
		return err
	}
	return nil
}
